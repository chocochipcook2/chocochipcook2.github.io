{"meta":{"title":"CCC2's blog","subtitle":"To Be Changed","description":"","author":"ChocoChipCook2","url":"https://chocochipcook2.github.io","root":"/"},"pages":[{"title":"categories","date":"2022-08-15T16:59:38.000Z","updated":"2022-08-29T06:53:59.020Z","comments":true,"path":"categories/index.html","permalink":"https://chocochipcook2.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-08-15T16:59:45.000Z","updated":"2022-08-29T06:53:59.020Z","comments":true,"path":"about/index.html","permalink":"https://chocochipcook2.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Java의 정석 Chap.02","slug":"Chap-02","date":"2022-08-29T15:57:01.000Z","updated":"2022-08-29T15:58:49.768Z","comments":true,"path":"2022/08/30/Chap-02/","link":"","permalink":"https://chocochipcook2.github.io/2022/08/30/Chap-02/","excerpt":"","text":"Java 요점 22.1 변수 1. 변수의 선언 int a; 2. 변수의 초기화 int a &#x3D; 0; 한줄에 여러개 가능 ( int a, b; or int a&#x3D;17, b&#x3D;10; 변수의 이름 대소문자 구분, 길이 제한 x 예약어 사용 불가능 ( 예약어 &#x3D; 기본적으로 언어에 깔려있는 클래스나 변수, 메서드의 이름) 숫자로 시작하면 안된다 특수문자는 _ 와 $ 만 허용한다. 그 외 권장되는 규칙 : 클래스 이름의 첫 글자는 항상 대문자, 변수와 메서드의 이름 첫 글자는 항상 소문자 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 한다.(Pascal case) 상수의 이름은 모두 대문자로 한다. 여러 단어로 이루어진 경우 _ 로 구분한다. PI, MAX_NUMBER 이름은 용도를 알기 쉽게 의미 있는 이름을 쓰는 것이 좋다.2.2 변수의 타입 기본형과 참조형 기본형 변수 ( primitive type) : boolean, char, int, long, float, double, byte, short 8개 참조형 변수 ( reference type) : 객체의 주소를 저장한다. -사용예시 : 클래스이름 변수이름; -Date today &#x3D; new Date(); 2.2.1 기본형 변수 1. boolean을 제외한 나머지 7개 기본형 변수는 서로 연산과 변환이 가능하다. 2. 정수형 변수는 4가지(int, long, byte, short)인데 저장할 수 있는 값의 범위가 다르므로 메모리를 절약하려면 byte나 short를 사용한다. cpu가 가장 효율적으로 처리할 수 있는 타입은 int로 주로 정수형에는 int를 사용한다. 2.2.2 상수와 리터럴 상수는 한번 값을 저장하면 다른 값으로 변경할 수 없다. 변수 선언과 동일하며 앞에 final을 붙여준다. 상수는 선언과 동시에 반드시 초기화한다.(사용 전에만 초기화하면 된다) 리터럴은 영단어로 literally가 문자 그대로 혹은 정확하게 를 의미하는 것과 같이 상수 그 자체를 표현하는 말이다. 내가 직접 선언한 final int FIRST_VALUE = 12; 가 아닌 12, 19, 1.3824같은 숫자형태 그대로를 칭하는 말이다. 리터럴의 타입 정수형에서는 진법을 나타내는 접두사를 사용한다. 0은 8진수, 0x는 16진수, 0b는 2진수 이다. 정수형 중간에는 구분자 _ 를 넣어 보기 편하게 쓸 수 있다. 실수형에서는 타입을 구분하는 접미사를 사용한다. float에는 f를 붙인다. d는 double을 나타내지만 기본적으로 생략하면 double타입으로 간주한다. 리터럴 접미사는 long과 float의 l (헷갈림 방지를 위해 L), f 만 신경 쓰면 된다. 문자 리터럴 문자 리터럴은 문자 하나를 작은 따옴표로 감싼것으로 빈 문자 리터럴은 사용할 수 없고 ‘’ x , 문자열을 감쌀 수 없다 ‘Java’ x 문자열 리터럴은 빈 문자열을 허용한다 “” 문자열에서의 덧셈 연산자 덧셈 연산자는 피연산자가 모두 숫자일 때는 두 수를 더하지만, 피연산자 중 어느 한 쪽이 string이면 나머지 한 쪽을 먼저 string으로 변환한 다음 두 string을 결합한다.js 이를 활용해 아무 내용이 없는 빈 문자열””을 사용해 다른 타입의 값을 문자열로 변환하는 방법도 있다.","categories":[{"name":"Java의 정석","slug":"Java의-정석","permalink":"https://chocochipcook2.github.io/categories/Java%EC%9D%98-%EC%A0%95%EC%84%9D/"}],"tags":[{"name":"java","slug":"java","permalink":"https://chocochipcook2.github.io/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://chocochipcook2.github.io/tags/jvm/"},{"name":"java의정석","slug":"java의정석","permalink":"https://chocochipcook2.github.io/tags/java%EC%9D%98%EC%A0%95%EC%84%9D/"}]},{"title":"Java의 정석 Chap.01","slug":"java-1-주차","date":"2022-08-29T15:55:37.000Z","updated":"2022-08-29T15:58:22.869Z","comments":true,"path":"2022/08/30/java-1-주차/","link":"","permalink":"https://chocochipcook2.github.io/2022/08/30/java-1-%EC%A3%BC%EC%B0%A8/","excerpt":"","text":"Ch.01. 자바를 시작하기 전에다른 언어를 이미 사용하거나 접해보았던 개발자에게새로운 언어를 배우는 가장 쉬운 방법은 기존에 알고있던 개념과 새로운 언어의 개념을 서로 비교하면서차이점과 공통점을 찾는 것이라고 생각한다.내가 접해보았던 그리고 현재 사용중인 언어로는 크게 javascript(TS), C++ 정도가 있다. 1.1.3 자바언어의 특징 운영체제에 독립적이다(JVM) 객체지향 언어이다. 객체지향 언어면서도 비교적 배우기 쉽다. 자동 메모리 관리(Garbage Collector) 네트워크와 분산처리를 지원한다. 멀티쓰레드를 지원한다. 동적 로딩을 지원한다. 먼저 1장을 펴자마자 가장 생소한 개념은 JVM 이었다.운영체제에 관계없이 동작하기 위해 java로 작성한 코드가 JVM이라는 별도의 소프트웨어 위에서 해석되고 동작된다는 말이었는데 나에겐 docker가 바로 떠올랐다.아직 정확한 개념을 알 수 없지만 대충 내가 생각한 의미는 아래 그림과 같다. 또 다른 점은 Garbage Collection인데C++에서는 당연히 기본적으로 자동 동작하지 않는 기능이기에 최적화 할때가 아니면 학부수준에서는 신경쓸 필요가 없었다.사실 수동으로 해주지 않아도 작동한다는 점에서 존재와 구조만 대충 이해하고 넘어가면 크게 신경쓰지 않아도 알아서 잘 돌아가지 않을까 싶다.(?) 1.2 자바 환경 구축 http://java.sun.com/ 에서 JDK 설치 자주 참고하기 위한 공식 문서인 Java API 문서를 다운 받는다. 이클립스, 인텔리제이 등의 개발도구 혹은 편집기를 설치한다. 간단한 코드를 작성 후 컴파일 및 실행해 본다. 1.3.1 코드 작성시 기본적인 유의사항 Public class는 하나의 소스파일에 한개 이하로 존재해야한다. Public class가 있는 경우, 소스파일의 이름은 반드시 public class의 이름과 일치해야 한다.(대소문자 구분) Public class가 없는 경우, 소스파일의 이름은 내부에서 선언된 class중 어떤 것의 이름이든 관계 없다. 1.3.4 주석 주석은 &#x2F;&#x2F;이후로 오는 라인 한줄, &#x2F;_과 _&#x2F; 사이에 오는 라인 여러 줄로 작성할 수 있다.이건 C++과 동일한듯?","categories":[{"name":"Java의 정석","slug":"Java의-정석","permalink":"https://chocochipcook2.github.io/categories/Java%EC%9D%98-%EC%A0%95%EC%84%9D/"}],"tags":[{"name":"java","slug":"java","permalink":"https://chocochipcook2.github.io/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://chocochipcook2.github.io/tags/jvm/"},{"name":"java의정석","slug":"java의정석","permalink":"https://chocochipcook2.github.io/tags/java%EC%9D%98%EC%A0%95%EC%84%9D/"}]}],"categories":[{"name":"Java의 정석","slug":"Java의-정석","permalink":"https://chocochipcook2.github.io/categories/Java%EC%9D%98-%EC%A0%95%EC%84%9D/"}],"tags":[{"name":"java","slug":"java","permalink":"https://chocochipcook2.github.io/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://chocochipcook2.github.io/tags/jvm/"},{"name":"java의정석","slug":"java의정석","permalink":"https://chocochipcook2.github.io/tags/java%EC%9D%98%EC%A0%95%EC%84%9D/"}]}